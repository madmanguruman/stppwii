// Function prototypes

#ifdef DEBUGGING
void dputs(char *buf);
void debug_printf(char *fmt, ...);
#endif

void sdl_actual_draw_text(void *handle, int x, int y, int fonttype, int fontsize, int align, int colour, char *text);
void fatal(char *fmt, ...);
void Lock_SDL_Surface(frontend *fe);
void Unlock_SDL_Surface(frontend *fe);
void get_random_seed(void **randseed, int *randseedsize);
void frontend_default_colour(frontend *fe, float *output);
void sdl_start_draw(void *handle);
void sdl_no_clip(void *handle);
void sdl_clip(void *handle, int x, int y, int w, int h);
void sdl_actual_clip(void *handle, int x, int y, int w, int h);
void sdl_unclip(void *handle);
void sdl_draw_text(void *handle, int x, int y, int fonttype, int fontsize, int align, int colour, char *text);
void sdl_actual_draw_text(void *handle, int x, int y, int fonttype, int fontsize, int align, int colour, char *text);
void sdl_draw_rect(void *handle, int x, int y, int w, int h, int colour);
void sdl_actual_draw_rect(void *handle, int x, int y, int w, int h, int colour);
void sdl_draw_line(void *handle, int x1, int y1, int x2, int y2, int colour);
void sdl_actual_draw_line(void *handle, int x1, int y1, int x2, int y2, int colour);
void sdl_draw_poly(void *handle, int *coords, int npoints, int fillcolour, int outlinecolour);
void sdl_draw_circle(void *handle, int cx, int cy, int radius, int fillcolour, int outlinecolour);
void sdl_status_bar(void *handle, char *text);
blitter *sdl_blitter_new(void *handle, int w, int h);
void sdl_blitter_free(void *handle, blitter *bl);
void sdl_blitter_save(void *handle, blitter *bl, int x, int y);
void sdl_blitter_load(void *handle, blitter *bl, int x, int y);
void sdl_draw_update(void *handle, int x, int y, int w, int h);
void sdl_actual_draw_update(void *handle, int x, int y, int w, int h);
void sdl_end_draw(void *handle);
static void configure_area(int x, int y, void *data);
Uint32 sdl_timer_func(Uint32 interval, void *data);
Uint32 sdl_mouse_timer_func(Uint32 interval, void *data);
void deactivate_timer(frontend *fe);
void activate_timer(frontend *fe);
static void get_size(frontend *fe, int *px, int *py);
int read_game_helpfile(frontend *fe);
static frontend *new_window(char *arg, int argtype, char **error);
void game_pause(frontend *fe);
void game_quit();
void Main_SDL_Loop(void *handle);
int main(int argc, char **argv);
int load_config_from_INI(frontend *fe);
int save_config_to_INI(frontend *fe);
char *sanitise_game_name(char *unclean_game_name);
char *save_game(frontend *fe, uint saveslot_number);
void load_game(frontend *fe, uint saveslot_number);
int get_touchpad_coords();
int get_mouse_type();
void cleanup_and_exit(frontend *fe, int return_value);
Uint32 SDL_GetPixel(SDL_Surface *surface, int x ,int y);
void actual_lock_surface(SDL_Surface *surface);
void actual_unlock_surface(SDL_Surface *surface);
void start_loading_animation();
void stop_loading_animation();
int splashscreen_thread_func(void *data);
void menu_loop(frontend *fe);
void redraw_gamelist_menu(frontend *fe);
void start_game(frontend *fe, int game_index, uint skip_config);
void change_clockspeed(frontend *fe, uint new_clock_speed);
uint savefile_exists(char *game_name, uint saveslot_number);
char *generate_save_filename(char *game_name, uint saveslot_number);
void process_key(frontend *fe, int x, int y, int button);
void delete_ini_file(frontend *fe, int game_index);
void start_background_music();
void background_music_callback();
uint file_exists(char *filename);
void initialise_audio();
void play_sound();
void fade_out_background_music();
void load_global_config_from_INI();
char *autosave_game(frontend *fe);
void delete_savegame(frontend *fe, uint saveslot_number);
void stop_background_music();
uint save_global_config_to_INI();
void delete_autosave_game(frontend *fe);
int autosave_file_exists(char *game_name);
void load_autosave_game(frontend *fe);
void list_music_files();
void file_list_test();
void show_hourglass_cursor(uint toggle);
void initialise_hourglass_cursor();
char *get_music_filename(uint track_number);
void play_music_track(uint track_number);
void show_keyboard_icon(frontend *fe);
